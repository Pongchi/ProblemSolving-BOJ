def solution(matrix_sizes):

    answer = 0
    
    while True:
        a, b = matrix_sizes.pop()
        c, d = matrix_sizes.pop()
        result = []
        if a == d:
            result = [c, b]
            answer += c * a * b
        elif b == c:
            result = [a, d]
            answer += a * c * d

        if not len(matrix_sizes):
            break

        matrix_sizes.append(result)

    return answer

print(solution(
    [[5,3],[3,10],[10,6]]
), 270)

print(solution(
    [[9, 10], [10, 9], [9, 1], [1, 2]]
), 198)

print(solution(
    [[4, 7], [7, 6], [6, 4], [4, 1], [1, 5], [5, 3], [3, 2], [2, 9], [9, 7], [7, 4], [4, 8], [8, 2], [2, 6]]
), 308)

print(solution(

), 1584000000)